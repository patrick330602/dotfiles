#!/bin/sh

CURR_OS=$(uname -s)
echo "Please enter your password to pre-authorize sudo:"
sudo -v

# install brew if it is on mac and not installed
case "$CURR_OS" in
    Darwin*)
        if test ! "$(which brew)"; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

            # source brew; if it is mac, also install coreutils and gnu-sed
            BASE_HOMEBREW_FOLDER=/usr/local
            if [ "$(arch)" = "arm64" ]; then
                BASE_HOMEBREW_FOLDER=/opt/homebrew
            fi
            eval "$(${BASE_HOMEBREW_FOLDER}/bin/brew shellenv)"
        fi
        ;;
esac

# install necessary packages
echo "Installing necessary packages..."
case "$CURR_OS" in
    Darwin*)
        brew install coreutils gnu-sed starship zsh-syntax-highlighting
        ;;
    Linux*)
        # if fedora, install from dnf
        if test "$(which dnf)"; then
            sudo dnf copr enable atim/starship -y
            sudo dnf install -y starship
        else
            curl -fsSL https://starship.rs/install.sh | sh -s -- -y
        fi
        ;;
esac

SED=$(which sed)
case "$CURR_OS" in
    Darwin*)
        if test "$(which gsed)"; then
            SED=$(which gsed)
        fi
    ;;
esac

git clone "git@git.wedotstud.io:patrick/dotfiles.git" "$HOME/.dotfiles" || {
    # If SSH clone fails, try HTTPS
    echo "SSH clone failed, trying with HTTPS..."
    git clone "https://git.wedotstud.io/patrick/dotfiles.git" "$HOME/.dotfiles"
}

# insert into .bashrc or .zshrc if not already there
if ! grep -q ". $HOME/.dotfiles/.dotfiles.rc" "$HOME/.bashrc"; then
    # try to insert before the line "# Fig post block" or "# CodeWhisperer post block"
    if grep -q "# Fig post block" "$HOME/.bashrc"; then
        $SED -i "/# Fig post block/i . $HOME/.dotfiles/.dotfiles.rc" "$HOME/.bashrc"
    elif grep -q "# CodeWhisperer post block" "$HOME/.bashrc"; then
        $SED -i "/# CodeWhisperer post block/i . $HOME/.dotfiles/.dotfiles.rc" "$HOME/.bashrc"
    else
        # if neither of those lines exist, just append to the end of the file
        echo ". $HOME/.dotfiles/.dotfiles.rc" >> "$HOME/.bashrc"
    fi
fi

if ! grep -q ". $HOME/.dotfiles/.dotfiles.rc" "$HOME/.zshrc"; then
    # try to insert before the line "# Fig post block" or "# CodeWhisperer post block" or "# Q post block"
    if grep -q "# Fig post block" "$HOME/.zshrc"; then
        $SED -i "/# Fig post block/i . $HOME/.dotfiles/.dotfiles.rc" "$HOME/.zshrc"
    elif grep -q "# CodeWhisperer post block" "$HOME/.zshrc"; then
        $SED -i "/# CodeWhisperer post block/i . $HOME/.dotfiles/.dotfiles.rc" "$HOME/.zshrc"
    elif grep -q "# Q post block" "$HOME/.zshrc"; then
        $SED -i "/# Q post block/i . $HOME/.dotfiles/.dotfiles.rc" "$HOME/.zshrc"
    else
        # if neither of those lines exist, just append to the end of the file
        echo ". $HOME/.dotfiles/.dotfiles.rc" >> "$HOME/.zshrc"
    fi
fi

# install starship config
# if starship config already exists and not symlinked, back it up
if test -f "$HOME/.config/starship.toml" && ! test -L "$HOME/.config/starship.toml"; then
    echo "Backing up existing starship configuration..."
    mv "$HOME/.config/starship.toml" "$HOME/.config/starship.toml.bak"
fi
echo "Installing starship configuration..."
mkdir -p "$HOME/.config"
ln -s "$HOME/.dotfiles/starship.toml" "$HOME/.config/starship.toml"


# install neovim
if ! test "$(which nvim)"; then
    echo "Installing neovim..."
    case "$CURR_OS" in
        Darwin*)
            brew install neovim
            ;;
        Linux*)
            # if fedora, install from dnf
            if test "$(which dnf)"; then
                sudo dnf install -y neovim
            # if ubuntu, install from apt
            elif test "$(which apt)"; then
                sudo apt install -y neovim
            fi
            ;;
    esac
fi

# install vim-plug
if ! test -f "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim; then
    echo "Installing vim-plug..."
    curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# install configuration nvim-config.vim to ~/.config/nvim/init.vim
# backup existing init.vim if it exists
if test -f "$HOME/.config/nvim/init.vim"; then
    echo "Backing up existing nvim configuration..."
    mv "$HOME/.config/nvim/init.vim" "$HOME/.config/nvim/init.vim.bak"
fi
echo "Installing nvim configuration..."
mkdir -p "$HOME/.config/nvim"
ln -s "$HOME/.dotfiles/nvim-config.vim" "$HOME/.config/nvim/init.vim"

nvim +PlugClean +PlugUpdate +PlugUpgrade +qall +silent

sleep 10
echo "Done! Please restart your shell."