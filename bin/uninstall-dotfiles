#!/bin/sh

# Define the commands
SED=$(which sed)
case "$(uname -s)" in
    Darwin*)
        if test "$(which gsed)"; then
            SED=$(which gsed)
        fi
    ;;
esac

# Remove cloned repository
if [ -d "$HOME/.dotfiles" ]; then
    echo "Removing cloned repository..."
    rm -rf "$HOME/.dotfiles"
fi

escape_slashes() {
    echo "$1" | $SED 's/\//\\\//g'
}

ESCAPED_HOME=$(escape_slashes "$HOME")

# Remove source line from .bashrc and .zshrc
if grep -q ". $HOME/.dotfiles/.dotfiles.rc" "$HOME/.bashrc"; then
    echo "Removing source line from .bashrc..."
    $SED -i "/. $ESCAPED_HOME\/.dotfiles\/.dotfiles.rc/d" "$HOME/.bashrc"
fi

if grep -q ". $HOME/.dotfiles/.dotfiles.rc" "$HOME/.zshrc"; then
    echo "Removing source line from .zshrc..."
    $SED -i "/. $ESCAPED_HOME\/.dotfiles\/.dotfiles.rc/d" "$HOME/.zshrc"
fi

# uninstall starship config
if test -f "$HOME/.config/starship.toml"; then
    echo "Removing starship configuration..."
    rm "$HOME/.config/starship.toml"
fi
if test -f "$HOME/.config/starship.toml.bak"; then
    echo "Restoring backed up starship configuration..."
    mv "$HOME/.config/starship.toml.bak" "$HOME/.config/starship.toml"
fi

# remove folder ~/.local/share/nvim/lazy if it exists
if test -d "$HOME/.local/share/nvim/lazy"; then
    echo "Removing lazy.nvim plugins..."
    rm -rf "$HOME/.local/share/nvim/lazy"
fi
if test -d "$HOME/.local/state/nvim/lazy"; then
    echo "Removing lazy.nvim state..."
    rm -rf "$HOME/.local/state/nvim/lazy"
fi
if test -f "$HOME/.config/nvim/lazy-lock.json"; then
    echo "Removing lazy-lock.json..."
    rm -rf "$HOME/.config/nvim/lazy-lock.json"
fi

# Remove nvim configuration
if test -f "$HOME/.config/nvim/init.lua"; then
    echo "Removing nvim configuration..."
    rm "$HOME/.config/nvim/init.lua"
fi
